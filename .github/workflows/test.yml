name: QualGent AppWright Test

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  ORG_ID: qualgent
  APP_VERSION_ID: ${{ github.sha }}
  BROWSERSTACK_USERNAME: ${{ secrets.BROWSERSTACK_USERNAME }}
  BROWSERSTACK_ACCESS_KEY: ${{ secrets.BROWSERSTACK_ACCESS_KEY }}

jobs:
  run-tests:
    runs-on: ubuntu-latest
    
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: |
        npm ci
        # Install BrowserStack test dependencies
        cd node-appium-app-browserstack-master/android && npm ci

    - name: Install qgjob CLI globally
      run: |
        npm link
        # Verify qgjob is available
        qgjob --version

    - name: Create test environment file
      run: |
        cat > .env << EOF
        PORT=3000
        NODE_ENV=test
        LOG_LEVEL=info
        REDIS_URL=redis://localhost:6379
        REDIS_HOST=localhost
        REDIS_PORT=6379
        QGJOB_API_URL=http://localhost:3000/api
        MAX_CONCURRENT_JOBS=5
        JOB_TIMEOUT=300000
        EOF

    - name: Start QualGent job server
      run: |
        npm start &
        echo $! > server.pid
        # Wait for server to be ready
        for i in {1..30}; do
          if curl -f http://localhost:3000/api/health > /dev/null 2>&1; then
            echo "Server is ready"
            break
          fi
          echo "Waiting for server... ($i/30)"
          sleep 2
        done
      env:
        NODE_ENV: test
        REDIS_URL: redis://localhost:6379

    - name: Verify server health and components
      run: |
        echo "=== Server Health ==="
        curl -f http://localhost:3000/api/health
        echo ""
        
        echo "=== Detailed Health ==="
        curl -s http://localhost:3000/api/health | jq '.'
        
        echo "=== Testing qgjob CLI connection ==="
        # Test CLI connection to server
        qgjob --help

    - name: Register test agents
      run: |
        echo "Registering test agents..."
        
        # Register emulator agent
        EMULATOR_AGENT_RESPONSE=$(curl -s -X POST http://localhost:3000/api/agents \
          -H "Content-Type: application/json" \
          -d '{
            "name": "ci-emulator-agent",
            "capabilities": {
              "emulator": true,
              "device": false,
              "browserstack": false
            },
            "metadata": {
              "type": "ci",
              "location": "github-actions"
            }
          }')
        echo "Emulator agent registered: $EMULATOR_AGENT_RESPONSE"
        EMULATOR_AGENT_ID=$(echo "$EMULATOR_AGENT_RESPONSE" | jq -r '.agent.id // empty')
        echo "emulator_agent_id=$EMULATOR_AGENT_ID" >> $GITHUB_OUTPUT
        
        # Register device agent
        DEVICE_AGENT_RESPONSE=$(curl -s -X POST http://localhost:3000/api/agents \
          -H "Content-Type: application/json" \
          -d '{
            "name": "ci-device-agent",
            "capabilities": {
              "emulator": false,
              "device": true,
              "browserstack": false
            },
            "metadata": {
              "type": "ci",
              "location": "github-actions"
            }
          }')
        echo "Device agent registered: $DEVICE_AGENT_RESPONSE"
        DEVICE_AGENT_ID=$(echo "$DEVICE_AGENT_RESPONSE" | jq -r '.agent.id // empty')
        echo "device_agent_id=$DEVICE_AGENT_ID" >> $GITHUB_OUTPUT
        
        # Register BrowserStack agent (if credentials available)
        if [[ -n "$BROWSERSTACK_USERNAME" && -n "$BROWSERSTACK_ACCESS_KEY" ]]; then
          echo "BrowserStack credentials found, registering BrowserStack agent..."
          BROWSERSTACK_AGENT_RESPONSE=$(curl -s -X POST http://localhost:3000/api/agents \
            -H "Content-Type: application/json" \
            -d '{
              "name": "ci-browserstack-agent",
              "capabilities": {
                "emulator": true,
                "device": true,
                "browserstack": true
              },
              "metadata": {
                "type": "ci",
                "location": "browserstack-cloud"
              }
            }')
          echo "BrowserStack agent registered: $BROWSERSTACK_AGENT_RESPONSE"
          BROWSERSTACK_AGENT_ID=$(echo "$BROWSERSTACK_AGENT_RESPONSE" | jq -r '.agent.id // empty')
          echo "browserstack_agent_id=$BROWSERSTACK_AGENT_ID" >> $GITHUB_OUTPUT
        else
          echo "BrowserStack credentials not available, skipping BrowserStack agent registration"
          echo "browserstack_agent_id=" >> $GITHUB_OUTPUT
        fi
        
        # Verify agents are registered
        echo "=== Registered Agents ==="
        curl -s http://localhost:3000/api/agents | jq '.agents[] | {id: .id, name: .name, capabilities: .capabilities, status: .status}'
      id: register-agents

    - name: Keep agents alive with heartbeats
      run: |
        echo "Starting agent heartbeat process..."
        
        # Function to send heartbeats for all agents
        send_heartbeats() {
          while true; do
            # Get all agent IDs
            AGENT_IDS=$(curl -s http://localhost:3000/api/agents | jq -r '.agents[].id')
            
            for agent_id in $AGENT_IDS; do
              # Send heartbeat for each agent
              curl -s -X PUT "http://localhost:3000/api/agents/$agent_id/heartbeat" > /dev/null 2>&1 || true
            done
            
            sleep 10
          done
        }
        
        # Start heartbeat process in background
        send_heartbeats &
        HEARTBEAT_PID=$!
        echo "heartbeat_pid=$HEARTBEAT_PID" >> $GITHUB_OUTPUT
        echo "Agent heartbeat process started with PID: $HEARTBEAT_PID"
      id: agent-heartbeat

    - name: Submit test jobs using qgjob CLI
      id: submit-jobs
      run: |
        echo "Submitting test jobs using qgjob CLI..."
        
        # Wait a moment for agents to be ready
        sleep 3
        
        # Test 1: Integration test (emulator)
        echo "Submitting integration test..."
        JOB1=$(qgjob submit \
          --org-id=$ORG_ID \
          --app-version-id=$APP_VERSION_ID-integration \
          --test=tests/integration.spec.js \
          --priority=medium \
          --target=emulator | grep "Job ID:" | cut -d' ' -f3)
        echo "job1=$JOB1" >> $GITHUB_OUTPUT
        echo "Integration test job: $JOB1"
        
        # Test 2: BrowserStack Wikipedia test (same as manual test)
        if [[ -n "$BROWSERSTACK_USERNAME" && -n "$BROWSERSTACK_ACCESS_KEY" ]]; then
          echo "Submitting BrowserStack Wikipedia test (matching manual test)..."
          JOB2=$(qgjob submit \
            --org-id="test-org" \
            --app-version-id="wiki-v1.0" \
            --test="tests/mobile-app-wikipedia.spec.js" \
            --target="browserstack" \
            --priority="high" | grep "Job ID:" | cut -d' ' -f3)
          echo "job2=$JOB2" >> $GITHUB_OUTPUT
          echo "BrowserStack Wikipedia test job: $JOB2"
        else
          echo "BrowserStack credentials not available, skipping BrowserStack test"
          echo "job2=" >> $GITHUB_OUTPUT
        fi
        
        # Test 3: Device test (different app version)
        echo "Submitting device test..."
        JOB3=$(qgjob submit \
          --org-id=$ORG_ID \
          --app-version-id=$APP_VERSION_ID-device \
          --test=tests/integration.spec.js \
          --priority=low \
          --target=device | grep "Job ID:" | cut -d' ' -f3)
        echo "job3=$JOB3" >> $GITHUB_OUTPUT
        echo "Device test job: $JOB3"
        
        echo "=== Submitted Jobs ==="
        echo "Job 1 (Integration/Emulator): $JOB1"
        if [[ -n "$JOB2" ]]; then
          echo "Job 2 (Wikipedia/BrowserStack): $JOB2"
        fi
        echo "Job 3 (Integration/Device): $JOB3"

    - name: Wait for job completion and check results
      run: |
        echo "Waiting for jobs to complete..."
        
        # Function to check job status and wait for completion
        check_job() {
          local job_id=$1
          local job_name=$2
          local timeout=180
          local count=0
          
          if [[ -z "$job_id" ]]; then
            echo "Skipping $job_name (job ID is empty)"
            return 0
          fi
          
          echo "Checking $job_name (ID: $job_id)..."
          
          while [ $count -lt $timeout ]; do
            status=$(qgjob status --job-id=$job_id | grep "Status:" | cut -d' ' -f2)
            echo "[$job_name] Status: $status (${count}s elapsed)"
            
            case $status in
              "completed")
                echo "✅ $job_name completed successfully"
                return 0
                ;;
              "failed")
                echo "❌ $job_name failed"
                echo "=== $job_name Final Status ==="
                qgjob status --job-id=$job_id
                return 1
                ;;
              "running"|"pending"|"retrying")
                sleep 5
                count=$((count + 5))
                ;;
              *)
                echo "Unknown status for $job_name: $status"
                sleep 5
                count=$((count + 5))
                ;;
            esac
          done
          
          echo "⏰ $job_name timed out after ${timeout}s"
          echo "=== $job_name Final Status ==="
          qgjob status --job-id=$job_id
          return 1
        }
        
        # Check each job
        job_failures=0
        
        check_job "${{ steps.submit-jobs.outputs.job1 }}" "Integration Emulator Test" || job_failures=$((job_failures + 1))
        check_job "${{ steps.submit-jobs.outputs.job2 }}" "BrowserStack Wikipedia Test" || job_failures=$((job_failures + 1))
        check_job "${{ steps.submit-jobs.outputs.job3 }}" "Integration Device Test" || job_failures=$((job_failures + 1))
        
        # Final status summary
        echo "=== Final Job Status Summary ==="
        if [[ -n "${{ steps.submit-jobs.outputs.job1 }}" ]]; then
          echo "Integration Emulator Test:"
          qgjob status --job-id=${{ steps.submit-jobs.outputs.job1 }} | head -10
          echo ""
        fi
        
        if [[ -n "${{ steps.submit-jobs.outputs.job2 }}" ]]; then
          echo "BrowserStack Wikipedia Test:"
          qgjob status --job-id=${{ steps.submit-jobs.outputs.job2 }} | head -10
          echo ""
        fi
        
        if [[ -n "${{ steps.submit-jobs.outputs.job3 }}" ]]; then
          echo "Integration Device Test:"
          qgjob status --job-id=${{ steps.submit-jobs.outputs.job3 }} | head -10
          echo ""
        fi
        
        # Fail the build if any jobs failed
        if [ $job_failures -gt 0 ]; then
          echo "❌ $job_failures job(s) failed! Build failed."
          exit 1
        fi
        
        echo "✅ All jobs completed successfully!"

    - name: Display system status for debugging
      if: always()
      run: |
        echo "=== Final System Status ==="
        echo ""
        
        echo "=== Queue Status ==="
        curl -s http://localhost:3000/api/jobs 2>/dev/null | jq '.' || echo "Queue status unavailable"
        echo ""
        
        echo "=== Agent Status ==="
        curl -s http://localhost:3000/api/agents 2>/dev/null | jq '.' || echo "Agent status unavailable"
        echo ""
        
        echo "=== Server Health ==="
        curl -s http://localhost:3000/api/health 2>/dev/null | jq '.' || echo "Server health unavailable"
        echo ""

    - name: Cleanup processes
      if: always()
      run: |
        echo "Cleaning up processes..."
        
        # Stop heartbeat process
        if [[ -n "${{ steps.agent-heartbeat.outputs.heartbeat_pid }}" ]]; then
          echo "Stopping agent heartbeat process..."
          kill "${{ steps.agent-heartbeat.outputs.heartbeat_pid }}" 2>/dev/null || true
        fi
        
        # Stop job server
        if [ -f server.pid ]; then
          echo "Stopping job server..."
          kill $(cat server.pid) 2>/dev/null || true
          rm -f server.pid
        fi
        
        # Stop any remaining node processes
        pkill -f "node src/server/index.js" 2>/dev/null || true
        
        echo "Cleanup completed"

  # BrowserStack Integration Test (separate job)
  browserstack-test:
    runs-on: ubuntu-latest
    needs: run-tests
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' && vars.BROWSERSTACK_USERNAME != ''
    
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: |
        npm ci
        cd node-appium-app-browserstack-master/android && npm ci

    - name: Install qgjob CLI globally
      run: npm link

    - name: Start QualGent job server
      run: |
        npm start &
        echo $! > server.pid
        # Wait for server to be ready
        for i in {1..30}; do
          if curl -f http://localhost:3000/api/health > /dev/null 2>&1; then
            echo "Server is ready for BrowserStack test"
            break
          fi
          sleep 2
        done
      env:
        NODE_ENV: production
        REDIS_URL: redis://localhost:6379
        BROWSERSTACK_USERNAME: ${{ secrets.BROWSERSTACK_USERNAME }}
        BROWSERSTACK_ACCESS_KEY: ${{ secrets.BROWSERSTACK_ACCESS_KEY }}

    - name: Register BrowserStack agent
      run: |
        curl -X POST http://localhost:3000/api/agents \
          -H "Content-Type: application/json" \
          -d '{
            "name": "ci-browserstack-production",
            "capabilities": {
              "emulator": true,
              "device": true,
              "browserstack": true
            },
            "metadata": {
              "type": "production",
              "location": "browserstack-cloud",
              "ci": "github-actions"
            }
          }'

    - name: Run BrowserStack Wikipedia test
      run: |
        echo "Running production BrowserStack test..."
        qgjob submit \
          --org-id=qualgent-production \
          --app-version-id=${{ github.sha }}-prod \
          --test=tests/mobile-app-wikipedia.spec.js \
          --target=browserstack \
          --priority=high \
          --wait \
          --timeout=600
      env:
        BROWSERSTACK_USERNAME: ${{ secrets.BROWSERSTACK_USERNAME }}
        BROWSERSTACK_ACCESS_KEY: ${{ secrets.BROWSERSTACK_ACCESS_KEY }}

    - name: Cleanup BrowserStack test
      if: always()
      run: |
        if [ -f server.pid ]; then
          kill $(cat server.pid) 2>/dev/null || true
        fi

  # Docker Integration Test
  docker-integration-test:
    runs-on: ubuntu-latest
    needs: run-tests
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Test Docker Compose setup
      run: |
        echo "Testing full Docker Compose setup..."
        
        # Start services
        docker-compose up -d
        
        # Wait for services to be ready
        echo "Waiting for services to be ready..."
        sleep 60
        
        # Check container status
        echo "=== Container Status ==="
        docker-compose ps
        
        # Show logs for debugging
        echo "=== Job Server Logs ==="
        docker-compose logs --tail=50 job-server
        
        echo "=== Redis Logs ==="
        docker-compose logs --tail=20 redis
        
        # Test health endpoints
        echo "=== Testing Health Endpoint ==="
        max_attempts=10
        attempt=1
        
        while [ $attempt -le $max_attempts ]; do
          if curl -f http://localhost:3000/api/health; then
            echo "✅ Health check passed"
            break
          else
            echo "❌ Health check failed (attempt $attempt/$max_attempts)"
            if [ $attempt -eq $max_attempts ]; then
              echo "❌ Health check failed after $max_attempts attempts"
              exit 1
            fi
            sleep 10
            attempt=$((attempt + 1))
          fi
        done
        
        # Register a test agent within the container
        echo "=== Registering Docker Test Agent ==="
        docker-compose exec -T job-server curl -X POST http://localhost:3000/api/agents \
          -H "Content-Type: application/json" \
          -d '{
            "name": "docker-test-agent",
            "capabilities": {
              "emulator": true,
              "device": false,
              "browserstack": false
            },
            "metadata": {
              "type": "docker",
              "location": "container"
            }
          }'
        
        # Submit a test job using the CLI within the container
        echo "=== Submitting Docker Test Job ==="
        docker-compose exec -T job-server qgjob submit \
          --org-id=qualgent-docker \
          --app-version-id=docker-test-${{ github.sha }} \
          --test=tests/integration.spec.js \
          --target=emulator \
          --priority=high \
          --wait \
          --timeout=120

    - name: Cleanup Docker
      if: always()
      run: |
        echo "Cleaning up Docker containers..."
        docker-compose down -v || docker compose down -v || true
