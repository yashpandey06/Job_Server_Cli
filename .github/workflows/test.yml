name: QualGent Test Orchestrator

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  ORG_ID: qualgent
  APP_VERSION_ID: ${{ github.sha }}
  BROWSERSTACK_USERNAME: ${{ secrets.BROWSERSTACK_USERNAME }}
  BROWSERSTACK_ACCESS_KEY:         echo ""
        echo "Integration Test:"
        qgjob status --job-id=${{ steps.submit-jobs.        echo "=== Submitting Docker AppWright Test Job ==="
        docker-compose exec -T job-server qgjob submit \
          --org-id=qualgent-docker \
          --app-version-id=docker-test-${{ github.sha }} \
          --test=tests/wikipedia-appwright.spec.js \
          --target=emulator \
          --priority=high \
          --wait \
          --timeout=120ob3 }} 2>/dev/null || echo "Could not get status" secrets.BROWSERSTACK_ACCESS_KEY }}

jobs:
  # Basic Node.js tests (unit tests)
  unit-tests:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run unit tests
      run: npm test

  # Integration tests with job orchestrator
  integration-tests:
    runs-on: ubuntu-latest
    needs: unit-tests
    
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Install qgjob CLI globally
      run: |
        npm link
        qgjob --version

    - name: Create test environment
      run: |
        cat > .env << EOF
        PORT=3000
        NODE_ENV=test
        LOG_LEVEL=info
        REDIS_URL=redis://localhost:6379
        REDIS_HOST=localhost
        REDIS_PORT=6379
        QGJOB_API_URL=http://localhost:3000/api
        MAX_CONCURRENT_JOBS=5
        JOB_TIMEOUT=300000
        EOF

    - name: Start QualGent job server
      run: |
        npm start &
        echo $! > server.pid
        # Wait for server to be ready
        for i in {1..30}; do
          if curl -f http://localhost:3000/api/health > /dev/null 2>&1; then
            echo "✅ Server is ready"
            break
          fi
          echo "⏳ Waiting for server... ($i/30)"
          sleep 2
        done
      env:
        NODE_ENV: test
        REDIS_URL: redis://localhost:6379

    - name: Verify server health
      run: |
        echo "=== Server Health Check ==="
        curl -f http://localhost:3000/api/health
        echo ""
        echo "=== Swagger API Docs ==="
        curl -f http://localhost:3000/api-docs 2>/dev/null || echo "Swagger docs not available"

    - name: Register test agents
      run: |
        echo "Registering test agents..."
        
        # Register emulator agent
        EMULATOR_RESPONSE=$(curl -s -X POST http://localhost:3000/api/agents \
          -H "Content-Type: application/json" \
          -d '{
            "name": "ci-emulator-agent",
            "capabilities": {
              "emulator": true,
              "device": false,
              "browserstack": false
            },
            "metadata": {
              "type": "ci",
              "location": "github-actions"
            }
          }')
        echo "✅ Emulator agent registered"
        
        # Register device agent  
        DEVICE_RESPONSE=$(curl -s -X POST http://localhost:3000/api/agents \
          -H "Content-Type: application/json" \
          -d '{
            "name": "ci-device-agent", 
            "capabilities": {
              "emulator": false,
              "device": true,
              "browserstack": false
            },
            "metadata": {
              "type": "ci",
              "location": "github-actions"
            }
          }')
        echo "✅ Device agent registered"
        
        # Verify agents are registered
        echo "=== Registered Agents ==="
        curl -s http://localhost:3000/api/agents | jq '.agents[] | {id: .id, name: .name, capabilities: .capabilities, status: .status}' || echo "Could not parse agent info"

    - name: Submit test jobs using qgjob CLI
      id: submit-jobs
      run: |
        echo "Submitting AppWright test jobs using qgjob CLI..."
        
        JOB1=$(qgjob submit 
          --org-id=$ORG_ID 
          --app-version-id=$APP_VERSION_ID-wiki 
          --test=tests/wikipedia-appwright.spec.js 
          --priority=high 
          --target=emulator 2>&1 | grep "Job ID:" | cut -d' ' -f3 || echo "")
        
        if [[ -z "$JOB1" ]]; then
          echo "❌ Failed to submit wikipedia test job"
          qgjob submit --org-id=$ORG_ID --app-version-id=$APP_VERSION_ID-wiki --test=tests/wikipedia-appwright.spec.js --priority=high --target=emulator || true
          exit 1
        fi
        
        echo "job1=$JOB1" >> $GITHUB_OUTPUT
        echo "✅ Wikipedia AppWright test job submitted: $JOB1"
        
        JOB2=$(qgjob submit 
          --org-id=$ORG_ID 
          --app-version-id=$APP_VERSION_ID-wiki 
          --test=tests/onboarding-appwright.spec.js 
          --priority=medium 
          --target=emulator 2>&1 | grep "Job ID:" | cut -d' ' -f3 || echo "")
          
        if [[ -z "$JOB2" ]]; then
          echo "❌ Failed to submit onboarding test job"
          exit 1
        fi
        
        echo "job2=$JOB2" >> $GITHUB_OUTPUT
        echo "✅ Onboarding AppWright test job submitted: $JOB2"
        
        JOB3=$(qgjob submit 
          --org-id=$ORG_ID 
          --app-version-id=$APP_VERSION_ID-integration 
          --test=tests/integration.spec.js 
          --priority=low 
          --target=device 2>&1 | grep "Job ID:" | cut -d' ' -f3 || echo "")
          
        if [[ -z "$JOB3" ]]; then
          echo "❌ Failed to submit integration test job" 
          exit 1
        fi
        
        echo "job3=$JOB3" >> $GITHUB_OUTPUT
        echo "✅ Integration test job submitted: $JOB3"
        
        echo "=== Submitted AppWright Test Jobs Summary ==="
        echo "Job 1 (Wikipedia/Emulator): $JOB1 [app_version: $APP_VERSION_ID-wiki]"
        echo "Job 2 (Onboarding/Emulator): $JOB2 [app_version: $APP_VERSION_ID-wiki] <- SAME APP VERSION"
        echo "Job 3 (Integration/Device): $JOB3 [app_version: $APP_VERSION_ID-integration]"
        echo ""
        echo "ℹ️  Jobs 1 & 2 have the same app_version_id and should be grouped together!"

    - name: Wait for job completion
      run: |
        echo "⏳ Waiting for jobs to complete..."
        
        # Function to check job status
        check_job() {
          local job_id=$1
          local job_name=$2
          local timeout=120
          local count=0
          
          echo "🔍 Checking $job_name (ID: $job_id)..."
          
          while [ $count -lt $timeout ]; do
            status=$(qgjob status --job-id=$job_id 2>/dev/null | grep "Status:" | cut -d' ' -f2 || echo "unknown")
            echo "[$job_name] Status: $status (${count}s elapsed)"
            
            case $status in
              "completed")
                echo "✅ $job_name completed successfully"
                return 0
                ;;
              "failed")
                echo "❌ $job_name failed"
                echo "=== $job_name Final Status ==="
                qgjob status --job-id=$job_id || true
                return 1
                ;;
              "running"|"pending"|"queued")
                sleep 5
                count=$((count + 5))
                ;;
              *)
                echo "⚠️  Unknown status for $job_name: $status"
                sleep 5
                count=$((count + 5))
                ;;
            esac
          done
          
          echo "⏰ $job_name timed out after ${timeout}s"
          qgjob status --job-id=$job_id || true
          return 1
        }
        
        job_failures=0
        check_job "${{ steps.submit-jobs.outputs.job1 }}" "Wikipedia AppWright Test" || job_failures=$((job_failures + 1))
        check_job "${{ steps.submit-jobs.outputs.job2 }}" "Onboarding AppWright Test" || job_failures=$((job_failures + 1))
        check_job "${{ steps.submit-jobs.outputs.job3 }}" "Integration Test" || job_failures=$((job_failures + 1))
        
        echo "=== Final AppWright Job Status Summary ==="
        echo "Wikipedia Test:"
        qgjob status --job-id=${{ steps.submit-jobs.outputs.job1 }} 2>/dev/null || echo "Could not get status"
        echo ""
        echo "Onboarding Test:"
        qgjob status --job-id=${{ steps.submit-jobs.outputs.job2 }} 2>/dev/null || echo "Could not get status"
        echo ""
        echo "Wikipedia Test:"
        qgjob status --job-id=${{ steps.submit-jobs.outputs.job2 }} 2>/dev/null || echo "Could not get status"
        echo ""
        echo "Device Test:"
        qgjob status --job-id=${{ steps.submit-jobs.outputs.job3 }} 2>/dev/null || echo "Could not get status"
        
        # For demo purposes, don't fail the build if jobs fail
        # In production, you would want to fail here
        if [ $job_failures -gt 0 ]; then
          echo "⚠️  $job_failures job(s) had issues, but continuing for demo purposes"
        else
          echo "✅ All jobs completed successfully!"
        fi

    - name: Display system status
      if: always()
      run: |
        echo "=== Final System Status ==="
        echo "=== Queue Status ==="
        curl -s http://localhost:3000/api/jobs 2>/dev/null | jq '.' || echo "Could not get queue status"
        
        echo "=== Agent Status ==="
        curl -s http://localhost:3000/api/agents 2>/dev/null | jq '.' || echo "Could not get agent status"
        
        echo "=== Server Health ==="
        curl -s http://localhost:3000/api/health 2>/dev/null | jq '.' || echo "Could not get server health"

    - name: Cleanup
      if: always()
      run: |
        echo "🧹 Cleaning up processes..."
        if [ -f server.pid ]; then
          kill $(cat server.pid) 2>/dev/null || true
          rm -f server.pid
        fi
        pkill -f "node src/server/index.js" 2>/dev/null || true
        echo "✅ Cleanup completed"

  # Docker integration test (simplified)
  docker-test:
    runs-on: ubuntu-latest
    needs: integration-tests
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Test Docker setup
      run: |
        echo "🐳 Testing Docker Compose setup..."
        
        # Start services
        docker-compose up -d
        
        # Wait for services
        echo "⏳ Waiting for services to be ready..."
        sleep 30
        
        # Check container status
        echo "=== Container Status ==="
        docker-compose ps
        
        # Test health endpoint
        echo "=== Testing Health Endpoint ==="
        for i in {1..10}; do
          if curl -f http://localhost:3000/api/health 2>/dev/null; then
            echo "✅ Docker services are healthy"
            break
          else
            echo "⏳ Waiting for services... ($i/10)"
            if [ $i -eq 10 ]; then
              echo "❌ Docker services failed to start"
              docker-compose logs
              exit 1
            fi
            sleep 10
          fi
        done
        
        # Register a test agent within the container
        echo "=== Registering Docker Test Agent ==="
        docker-compose exec -T job-server curl -X POST http://localhost:3000/api/agents \
          -H "Content-Type: application/json" \
          -d '{
            "name": "docker-test-agent",
            "capabilities": {
              "emulator": true,
              "device": false,
              "browserstack": false
            },
            "metadata": {
              "type": "docker",
              "location": "container"
            }
          }'
        
        # Submit an AppWright test job using the CLI within the container
        echo "=== Submitting Docker AppWright Test Job ==="
        docker-compose exec -T job-server qgjob submit \
          --org-id=qualgent-docker \
          --app-version-id=docker-test-${{ github.sha }} \
          --test=tests/integration.spec.js \
          --target=emulator \
          --priority=high \
          --wait \
          --timeout=120

    - name: Cleanup Docker
      if: always()
      run: |
        echo "🧹 Cleaning up Docker containers..."
        docker-compose down -v || true
